# Core
log_default:
  return: void
  args:
    message: char *
log_info:
  return: void
  args:
    message: char *
log_warning:
  return: void
  args:
    message: char *
log_error:
  return: void
  args:
    message: char *
log_debug:
  return: void
  args:
    message: char *
bind_command:
  return: bool
  args:
    name: char *
    callback: void *
    permission: char *
    helpString: char *

# Entity
entity_get_health:
  return: float
  args:
    entity: cEntity *
entity_set_health:
  return: void
  args:
    entity: cEntity *
    health: float
entity_is_invisible:
  return: bool
  args:
    entity: cEntity *
entity_get_world:
  return: cWorld *
  args:
    entity: cEntity *
entity_take_damage_1:
  return: void
  args:
    entity: cEntity *
    attacker: cEntity &
entity_take_damage_2:
  return: void
  args:
    entity: cEntity *
    type: eDamageType
    attacker: cEntity *
    rawDamage: int
    knockbackAmount: double
entity_take_damage_3:
  return: void
  args:
    entity: cEntity *
    type: eDamageType
    attacker: int
    rawDamage: int
    knockbackAmount: double
entity_take_damage_4:
  return: void
  args:
    entity: cEntity *
    type: eDamageType
    attacker: cEntity *
    rawDamage: int
    finalDamage: float
    knockbackAmount: double
entity_heal:
  return: void
  args:
    entity: cEntity *
    hitPoints: int
entity_get_entity_type:
  return: cEntity::eEntityType
  args:
    entity: cEntity *
entity_get_position:
  return: const Vector3d *
  args:
    entity: cEntity *

# Inventory
inventory_add_item:
  return: char
  args:
    inventory: cInventory *
    item: cItem *

# Player
player_get_game_mode:
  return: eGameMode
  args:
    player: cPlayer *
player_set_game_mode:
  return: void
  args:
    player: cPlayer *
    gameMode: eGameMode
player_get_inventory:
  return: const cInventory *
  args:
    player: cPlayer *
player_get_name:
  return: const char *
  args:
    player: cPlayer *
player_set_visible:
  return: void
  args:
    player: cPlayer *
    visible: bool
player_get_uuid:
  return: std::array<Byte, 16>
  args:
    player: cPlayer *
player_get_client_handle:
  return: const cClientHandle *
  args:
    player: cPlayer *
player_send_message:
  return: void
  args:
    player: cPlayer *
    message: char *
player_feed:
  return: bool
  args:
    player: cPlayer *
    food: int
    saturation: double
player_set_respawn_location:
  return: void
  args:
    player: cPlayer *
    x: int
    y: int
    z: int
    world: const cWorld &

# Root
root_broadcast_chat:
  return: void
  args:
    message: char *
    type: eMessageType
root_get_default_world:
  return: cWorld *
root_for_each_world:
  return: bool
  args:
    callback: void *
root_for_each_player:
  return: bool
  args:
    callback: void *

# World
world_are_command_blocks_enabled:
  return: bool
  args:
    world: cWorld *
world_set_command_blocks_enabled:
  return: void
  args:
    world: cWorld *
    enabled: bool
world_get_name:
  return: const char *
  args:
    world: cWorld *
world_get_block:
  return: BLOCKTYPE
  args:
    world: cWorld *
    x: int
    y: int
    z: int
world_set_block:
  return: void
  args:
    world: cWorld *
    x: int
    y: int
    z: int
    type: BLOCKTYPE
    meta: NIBBLETYPE
world_broadcast_chat:
  return: void
  args:
    world: cWorld *
    message: char *
    except: cClientHandle *
    type: eMessageType
world_dig_block:
  return: void
  args:
    world: cWorld *
    x: int
    y: int
    z: int
    digger: cEntity *
world_do_explosion_at:
  return: void
  args:
    world: cWorld *
    size: double
    x: double
    y: double
    z: double
    canCauseFire: bool
    source: eExplosionSource
    sourceData: void *
world_get_game_mode:
  return: eGameMode
  args:
    world: cWorld *
world_get_weather:
  return: eWeather
  args:
    world: cWorld *
world_set_weather:
  return: void
  args:
    world: cWorld *
    weather: eWeather
world_get_time_of_day:
  args:
    world: cWorld *
  return: int
world_set_time_of_day:
  return: void
  args:
    world: cWorld *
    time: int
world_get_world_age:
  return: long long int
  args:
    world: cWorld *
world_get_world_tick_age:
  return: long long int
  args:
    world: cWorld *
world_get_world_date:
  return: long long int
  args:
    world: cWorld *
world_for_each_player:
  return: bool
  args:
    world: cWorld *
    callback: void *

# Object creation
create_item:
  return: const cItem *
  args:
    type: short
    count: char
    damage: short
    enchantments: char *
    customName: char *
    loreTable: char **
    loreTableLength: int
delete_item:
  return: void
  args:
    item: cItem *
